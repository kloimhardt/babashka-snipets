---
title: "Introducing Twotiles: code visualization in Quarto"
format:
  html:
    code-fold: true
jupyter: python3
---

<script src="https://cdn.jsdelivr.net/npm/scittle@0.6.22/dist/scittle.js" type="application/javascript"></script>
<script src="https://unpkg.com/blockly/blockly.min.js"></script>
<script src="https://unpkg.com/blockly/msg/en.js"></script>
<script src="https://kloimhardt.github.io/twotiles/twotiles_core.js"></script>

<script>
var parse = scittle.core.eval_string(twotiles.parse_clj);
Blockly.defineBlocksWithJsonArray(twotiles.blocks);
</script>

<script>
var brender = (code,divid) =>
Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)),
Blockly.inject(divid,
{"toolbox": twotiles.toolbox,
"sounds": false,
"scrollbars": false,
"trashcan": false}));
</script>


```{python}
from sympy import symbols,diff,log
from functools import partial
x=symbols("x")
b=symbols("b")
y=symbols("y")

def call(f, x):
    return f(x)
```

## Symbolic computation in Python: SymPy

<div id="blocklyDiv1" style="height: 100px;"></div>
<script>brender("(log 64)", "blocklyDiv1")</script>
```{python}
log(64.0)
```

<div id="blocklyDiv2" style="height: 100px;"></div>
<script>brender("(diff (log x) x)", "blocklyDiv2")</script>
```{python}
diff(log(x),x)
```

<div id="blocklyDiv1.1" style="height: 100px;"></div>
<script>brender("(call log 64)", "blocklyDiv1.1")</script>
```{python}
call(log, 64.0)
```

<div id="blocklyDiv3" style="height: 150px;"></div>
<script>brender("(def (logarithm b x) (return (:tiles/infix (/ (log x) (log b)))))", "blocklyDiv3")</script>
```{python}
def logarithm(b, x):
    return log(x) / log(b)
```

<div id="blocklyDiv4" style="height: 100px;"></div>
<script>brender("(logarithm 8.0 64.0)", "blocklyDiv4")</script>
```{python}
logarithm(8.0, 64.0)
```

<div id="blocklyDiv5" style="height: 150px;"></div>
<script>brender("(def (log_base b) (return (partial logarithm b)))", "blocklyDiv5")</script>
```{python}
def log_base(b):
    return partial(logarithm, b)
```

<div id="blocklyDiv6" style="height: 100px;"></div>
<script>brender("(call (log_base 8.0) 64.0)", "blocklyDiv6")</script>
```{python}
call(log_base(8.0),64.0)
```

<div id="blocklyDiv7" style="height: 100px;"></div>
<script>brender("(diff (call (log_base 8.0) x) x)", "blocklyDiv7")</script>
```{python}
diff(call(log_base(8.0),x),x)
```
## Symbolic computation in JavaScript: EmmyJS 

<script src="https://kloimhardt.github.io/blog/js/emmy.js/build/emmy_bundle.js"></script>

<script>
     var loadEnv = (name) => {
         window[name] = emmy[name];
         return name;
     }
</script>

<script>
var symbol = emmy.symbol;

var specialchars =
[["", /\:/g],
 ["__gt_", /->/g],
 ["symbol_$1", /\'(\w+)/g],
 ["$1_dot_$2", /(\d+)\.(\d+)/g],
 [" minus_$2", /(\s+)\-(\w+)/g],
 ["$1_", /(\w+)\-/g],
 ["[ / $1 $2 ],", /(\w+)\/(\d+)/g]];

var post_specialchars =
[["$1.$2", /(\d+)_dot_(\d+)/g],
 ["$1e-$2", /(\d+)e_(\d+)/],
 ["-$1", /minus_(\w+)/g],
 //case symbol with hat 'v_r^x
 ["symbol_$1^$2", /symbol_(\w+)expt(\w+)/]]

var mathfns =
[["div", /\//g],
 ["mul", /\*/g],
 ["sub", /\-/g],
 ["add", /\+/g],
 ["expt", /\^/g]]

mathfns.map(x=> x[0]).map(loadEnv);

var replaceMath = (txt) =>
specialchars.concat(mathfns)
.reduce((s,r) => s.replace(r[1],r[0]), txt);

var swapFirst = (j) =>
j.constructor == Array && mathfns.map(x=> x[0]).includes(j[1])
? [j[1], j[0]].concat(j.slice(2)).map(swapFirst)
: j.constructor == Array
? j.map(swapFirst)
: j;

var insertCommas = (txt) =>
txt.replace(/(\w+)/g,'"$1",')
.replace(/\,\s+\]/g," ]");

var makeBrackets = (txt) =>
txt.trim()
.replace(/\(/g,"[ ")
           .replace(/\)/g," ],")
.replace(/,$/,"");

var textToJson = (txt) =>
insertCommas(replaceMath(makeBrackets(txt)));

var drv = emmy.D;

var replaceD = (j) =>
j.constructor == Array
? j.map(replaceD)
: j.constructor == String && j == "D"
? "drv"
: j.constructor == String
? post_specialchars.reduce((s,r) => s.replace(r[1],r[0]), j)
: j;

["to_infix", "simplify"].map(loadEnv);

var preAmble = (j) =>
j[0] != "define" && j[0] != "def"
? ["to_infix", j]
: j;

var identity = x => x;
var retrn = x => x;

var edgeCases = (j) =>
(j[0] === "define" || j[0] === "def")
&& j[2].constructor == Array && j[2][0] === "let"
&& j[1].constructor == String
? ["identity", "'let not allowed in variable definition'"]
: j;

var letFlat2 = (j) =>
j[0] === "let"
? j[1].concat(letFlat2(j[2]))
: [j];

var constructLet = (j) =>
["let", j.slice(0, j.length - 1), j[j.length - 1]]

var letFlat = (j) =>
j.constructor == Array && j[0] === "let"
? constructLet(letFlat2(j))
: j.constructor == Array
? j.map(letFlat)
: j;

var modifyJson = (j) =>
preAmble(replaceD(letFlat(edgeCases(swapFirst(j)))));

var makeFun = (j, callBack) =>
"var " + j[1][0] + " = (" + j[1].slice(1) + ") => "
+ callBack(j[2]) +";";

var makeFunFun = (j, callBack) =>
"var " + j[1][0][0] + " = (" + j[1][0].slice(1) + ") => "
+ "(" + j[1].slice(1) +") => " + callBack(j[2]) + ";";

var smap = (f, v) =>
v.length === 1
? f(v[0]) +";"
: f(v[0]) +"; "  + smap(f, v.slice(1));

var makeLet = (j, callBack) =>
"{" + smap((l) => "let " + l[0] + " = " + callBack(l[1]), j[1])
+ " return " +  callBack(j[2]) + "; }"

var jsonToJs = (j) =>
j.constructor == Array && j[0] === "let"
? makeLet(j, jsonToJs)
:j.constructor == Array && (j[0] === "define" || j[0] === "def")
&& j[1].constructor == Array
&& j[1][0].constructor == Array
? makeFunFun(j, jsonToJs)
:j.constructor == Array && (j[0] === "define" || j[0] === "def")
&& j[1].constructor == Array
? makeFun(j, jsonToJs)
: j.constructor == Array && j[0] === "lambda"
? "(" + j[1] + ") => " + jsonToJs(j[2])
:j.constructor == Array && (j[0] === "define" || j[0] === "def")
&& j[1].constructor == String
? "var " + j[1] + " = " + jsonToJs(j[2]) + ";"
:j.constructor == String && j.substring(0, 7) == "symbol_"
? 'symbol("' + j.substring(7, j.length) + '")'
:j.constructor == Array
? jsonToJs(j[0]) + "("  +  j.slice(1).map(jsonToJs) + ")"
: j;

var expressionToJs = (expr) =>
jsonToJs(modifyJson(JSON.parse(textToJson(expr))));

["sin", "cos", "pi", "velocity", "dot_product",
        "up", "nth", "Gamma", "compose", "literal_function",
        "definite_integral", "coordinate", "minimize",
        "linear_interpolants", "multidimensional_minimize",
        "make_path", "count",
        "square", "partial", "ref", "sqrt", "atan", "down",
        "solve_linear_left", "state_advancer", "cross_product",
        "Rx", "Ry", "Rz", "osculating_path", "log"].map(loadEnv);

var show_expression = simplify;
var vector_length = count;
var velocities = velocity;
var coordinates = coordinate;
var time = state => nth(state, 0);
var get = (obj, field) => obj[field.toString()]; null;
</script>

<script>
var x = symbol("x");
var b = symbol("b")
var y = symbol("y")
var call = (f, x) => f(x);

var diff = drv;
var logarithm = (b,x) => div(log(x),log(b));
var log_base = (b) => partial(logarithm,b);
</script>

<div id="blocklyDiv8" style="height: 100px;"></div>
<script>brender("(call (diff (log_base 8.0)) x)", "blocklyDiv8")</script>
```{ojs}
to_infix(
  call(diff(log_base(8.0)), x)
)
```

<div id="schemeDiv1" style="height: 50px;"></div>

<!--
<script>
document.getElementById("schemeDiv1").innerHTML =
eval(expressionToJs("(call (diff (log_base 8.0)) x)"));
</script>
-->

<div id="blocklyDiv9" style="height: 100px;"></div>
<script>brender("(call (diff log) x)", "blocklyDiv9")</script>
```{ojs}
to_infix(
  call(diff(log), x)
)
```

## Remember SymPy

<div id="blocklyDiv10" style="height: 100px;"></div>
<script>brender("(diff (log x) x)", "blocklyDiv10")</script>